---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { format } from 'date-fns';

const allPosts = await getCollection('blog');

const sortOptions = [
  { value: 'date-desc', label: 'Newest First' },
  { value: 'date-asc', label: 'Oldest First' },
  { value: 'title-asc', label: 'Title A-Z' },
  { value: 'title-desc', label: 'Title Z-A' }
];

const filterOptions = [
  { value: 'all', label: 'All Articles' },
  { value: 'featured', label: 'Featured Only' }
];

// Get all posts sorted by date
const posts = allPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<Layout title="All Articles">
  <div class="max-w-4xl mx-auto px-4">
    <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-2 mb-2">
      <h1 class="text-2xl font-semibold">All Articles</h1>
      <div class="flex gap-2">
        <div class="relative">
          <select
            id="sort-select"
            class="appearance-none px-3 py-1.5 pr-8 text-sm border border-gray-700 rounded-md hover:border-gray-600 bg-gray-800/50 text-gray-200 cursor-pointer focus:outline-none focus:border-blue-500/50"
          >
            {sortOptions.map(option => (
              <option value={option.value}>{option.label}</option>
            ))}
          </select>
          <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
        <div class="relative">
          <select
            id="filter-select"
            class="appearance-none px-3 py-1.5 pr-8 text-sm border border-gray-700 rounded-md hover:border-gray-600 bg-gray-800/50 text-gray-200 cursor-pointer focus:outline-none focus:border-blue-500/50"
          >
            {filterOptions.map(option => (
              <option value={option.value}>{option.label}</option>
            ))}
          </select>
          <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
      </div>
    </div>

    <div id="posts-container" class="border border-gray-800 rounded-lg divide-y divide-gray-800 bg-gray-900/30">
      {posts.map(post => (
        <article class="group">
          <a href={`/blog/${post.slug}`} class="block px-4 py-3 hover:bg-gray-800/30">
            <div class="flex items-baseline justify-between gap-4">
              <div class="min-w-0">
                <div class="flex items-center gap-2">
                  <h2 class="text-base font-medium text-blue-400 group-hover:text-blue-300 truncate">
                    {post.data.title}
                  </h2>
                  {post.data.featured && (
                    <span class="shrink-0 px-1.5 py-0.5 text-[10px] font-medium bg-amber-500/10 text-amber-500 rounded">
                      Featured
                    </span>
                  )}
                </div>
                <p class="mt-0.5 text-sm text-gray-400 line-clamp-1">{post.data.description}</p>
              </div>
              <time datetime={post.data.pubDate.toISOString()} class="shrink-0 text-xs text-gray-500">
                {format(post.data.pubDate, 'MMM d, yyyy')}
              </time>
            </div>
          </a>
        </article>
      ))}
    </div>
  </div>
</Layout>

<script>
  let allPosts = [];

  async function fetchPosts() {
    try {
      const response = await fetch('/api/posts.json');
      if (!response.ok) throw new Error('Failed to fetch posts');
      allPosts = await response.json();
      updatePosts();
    } catch (error) {
      console.error('Error fetching posts:', error);
    }
  }

  function sortPosts(posts, sortBy) {
    return [...posts].sort((a, b) => {
      switch (sortBy) {
        case 'date-asc':
          return new Date(a.pubDate) - new Date(b.pubDate);
        case 'date-desc':
          return new Date(b.pubDate) - new Date(a.pubDate);
        case 'title-asc':
          return a.title.localeCompare(b.title);
        case 'title-desc':
          return b.title.localeCompare(a.title);
        default:
          return new Date(b.pubDate) - new Date(a.pubDate);
      }
    });
  }

  function filterPosts(posts, filterBy) {
    return filterBy === 'featured' ? posts.filter(post => post.featured) : posts;
  }

  function updatePosts() {
    const sortSelect = document.getElementById('sort-select');
    const filterSelect = document.getElementById('filter-select');
    const container = document.getElementById('posts-container');
    
    if (!sortSelect || !filterSelect || !container) return;

    let filteredPosts = filterPosts(allPosts, filterSelect.value);
    let sortedPosts = sortPosts(filteredPosts, sortSelect.value);
    
    container.innerHTML = sortedPosts.map(post => `
      <article class="group">
        <a href="/blog/${post.slug}" class="block px-4 py-3 hover:bg-gray-800/30">
          <div class="flex items-baseline justify-between gap-4">
            <div class="min-w-0">
              <div class="flex items-center gap-2">
                <h2 class="text-base font-medium text-blue-400 group-hover:text-blue-300 truncate">
                  ${post.title}
                </h2>
                ${post.featured ? `
                  <span class="shrink-0 px-1.5 py-0.5 text-[10px] font-medium bg-amber-500/10 text-amber-500 rounded">
                    Featured
                  </span>
                ` : ''}
              </div>
              <p class="mt-0.5 text-sm text-gray-400 line-clamp-1">${post.description}</p>
            </div>
            <time datetime="${new Date(post.pubDate).toISOString()}" class="shrink-0 text-xs text-gray-500">
              ${new Date(post.pubDate).toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric', 
                year: 'numeric' 
              })}
            </time>
          </div>
        </a>
      </article>
    `).join('');
  }

  document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.getElementById('sort-select');
    const filterSelect = document.getElementById('filter-select');

    if (sortSelect) {
      sortSelect.addEventListener('change', updatePosts);
    }

    if (filterSelect) {
      filterSelect.addEventListener('change', updatePosts);
    }

    fetchPosts();
  });
</script>