---
const links = [
  { href: '/blog', text: 'Articles' },
  { href: '/tags', text: 'Topics' },
  { href: '/about', text: 'About' },
];

const currentPath = Astro.url.pathname;

// Get all blog posts for client-side search
import { getCollection } from 'astro:content';
const posts = await getCollection('blog');
const searchData = posts.map(post => ({
  title: post.data.title,
  description: post.data.description,
  tags: post.data.tags,
  slug: post.slug,
  featured: post.data.featured
}));
---

<header class="fixed top-0 left-0 right-0 z-50 bg-gray-900/95 backdrop-blur-sm border-b border-gray-800/50">
  <nav class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <a 
        href="/" 
        class="text-xl font-bold text-[#58a6ff] hover:text-[#79c0ff] transition-colors"
      >
        therocketor
      </a>

      <!-- Search Bar (Desktop) -->
      <div class="hidden md:flex items-center flex-1 max-w-md mx-8">
        <div class="relative w-full">
          <input
            type="search"
            id="search-input"
            placeholder="Search articles..."
            class="w-full bg-gray-800/50 text-sm text-gray-200 placeholder-gray-400 rounded-lg py-2 pl-4 pr-10 border border-gray-700/50 focus:outline-none focus:border-blue-500/50 focus:ring-1 focus:ring-blue-500/50"
            autocomplete="off"
          />
          <button class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </button>
          <!-- Search Results Dropdown -->
          <div id="search-results" class="absolute left-0 right-0 mt-2 bg-gray-800 border border-gray-700 rounded-lg shadow-lg overflow-hidden hidden">
            <!-- Results will be populated here -->
          </div>
        </div>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-1">
        {links.map(link => (
          <a
            href={link.href}
            class={`
              px-3 py-2 rounded-lg text-sm font-medium transition-colors
              ${currentPath === link.href 
                ? 'bg-gray-800 text-white' 
                : 'text-gray-300 hover:bg-gray-800/50 hover:text-white'
              }
            `}
          >
            {link.text}
          </a>
        ))}
      </div>

      <!-- Mobile Menu Button -->
      <button 
        id="mobile-menu-button"
        class="md:hidden p-2 rounded-lg text-gray-400 hover:text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
        aria-label="Open menu"
      >
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="hidden md:hidden pb-4">
      <!-- Mobile Search -->
      <div class="px-2 pt-2 pb-3">
        <div class="relative">
          <input
            type="search"
            id="mobile-search-input"
            placeholder="Search articles..."
            class="w-full bg-gray-800/50 text-sm text-gray-200 placeholder-gray-400 rounded-lg py-2 pl-4 pr-10 border border-gray-700/50 focus:outline-none focus:border-blue-500/50 focus:ring-1 focus:ring-blue-500/50"
            autocomplete="off"
          />
          <button class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </button>
          <!-- Mobile Search Results -->
          <div id="mobile-search-results" class="absolute left-0 right-0 mt-2 bg-gray-800 border border-gray-700 rounded-lg shadow-lg overflow-hidden hidden">
            <!-- Results will be populated here -->
          </div>
        </div>
      </div>

      <!-- Mobile Navigation Links -->
      <div class="px-2 space-y-1">
        {links.map(link => (
          <a
            href={link.href}
            class={`
              block px-3 py-2 rounded-lg text-base font-medium transition-colors
              ${currentPath === link.href 
                ? 'bg-gray-800 text-white' 
                : 'text-gray-300 hover:bg-gray-800 hover:text-white'
              }
            `}
          >
            {link.text}
          </a>
        ))}
      </div>
    </div>
  </nav>
</header>

<!-- Spacer to prevent content from hiding under fixed header -->
<div class="h-16"></div>

<script define:vars={{ searchData }}>
  function setupSearch(inputId, resultsId) {
    const searchInput = document.getElementById(inputId);
    const searchResults = document.getElementById(resultsId);
    let searchTimeout;

    if (!searchInput || !searchResults) return;

    function performSearch(query) {
      query = query.toLowerCase().trim();
      if (!query) {
        searchResults.classList.add('hidden');
        return;
      }

      const results = searchData
        .filter(post => {
          const titleMatch = post.title.toLowerCase().includes(query);
          const descMatch = post.description.toLowerCase().includes(query);
          const tagMatch = post.tags.some(tag => tag.toLowerCase().includes(query));
          return titleMatch || descMatch || tagMatch;
        })
        .slice(0, 10);

      searchResults.classList.remove('hidden');

      if (results.length === 0) {
        searchResults.innerHTML = `
          <div class="p-4 text-sm text-gray-400">
            No results found
          </div>
        `;
      } else {
        searchResults.innerHTML = results
          .map(result => `
            <a href="/blog/${result.slug}" class="block px-4 py-3 hover:bg-gray-700/50">
              <div class="flex items-center gap-2">
                <div class="text-sm font-medium text-white">${result.title}</div>
                ${result.featured ? `
                  <span class="px-1.5 py-0.5 text-[10px] font-medium bg-amber-500/10 text-amber-500 rounded">
                    Featured
                  </span>
                ` : ''}
              </div>
              <div class="text-xs text-gray-400 mt-1 line-clamp-1">${result.description}</div>
              <div class="flex flex-wrap gap-1 mt-1">
                ${result.tags.map(tag => `
                  <span class="text-[10px] px-1.5 py-0.5 bg-gray-700/50 text-gray-300 rounded-full">${tag}</span>
                `).join('')}
              </div>
            </a>
          `)
          .join('<div class="border-t border-gray-700"></div>');
      }
    }

    searchInput.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => performSearch(e.target.value), 150);
    });

    searchInput.addEventListener('focus', () => {
      if (searchInput.value.trim()) {
        searchResults.classList.remove('hidden');
      }
    });

    document.addEventListener('click', (e) => {
      if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
        searchResults.classList.add('hidden');
      }
    });

    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        searchResults.classList.add('hidden');
      }
    });
  }

  // Setup both desktop and mobile search
  document.addEventListener('DOMContentLoaded', () => {
    setupSearch('search-input', 'search-results');
    setupSearch('mobile-search-input', 'mobile-search-results');
  });

  // Mobile menu functionality
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      mobileMenu.classList.toggle('hidden');
      
      const svg = mobileMenuButton.querySelector('svg');
      if (svg) {
        svg.innerHTML = isExpanded
          ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />'
          : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />';
      }
    });
  }

  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    if (mobileMenu && mobileMenuButton && !mobileMenu.contains(e.target) && !mobileMenuButton.contains(e.target)) {
      mobileMenu.classList.add('hidden');
      mobileMenuButton.setAttribute('aria-expanded', 'false');
    }
  });
</script>

<style>
  /* Smooth transitions */
  #mobile-menu {
    transition: all 0.2s ease-in-out;
  }

  /* Enhanced touch targets for mobile */
  @media (max-width: 768px) {
    #mobile-menu a {
      position: relative;
      overflow: hidden;
    }

    #mobile-menu a::after {
      content: '';
      position: absolute;
      left: 0;
      right: 0;
      bottom: 0;
      height: 2px;
      background: linear-gradient(to right, #60a5fa, #a78bfa);
      transform: translateX(-100%);
      transition: transform 0.2s ease;
    }

    #mobile-menu a:active::after {
      transform: translateX(0);
    }
  }
</style>