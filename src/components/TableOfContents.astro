---
interface Props {
  headings: { depth: number; slug: string; text: string }[];
}

const { headings = [] } = Astro.props;
const filteredHeadings = headings.filter(h => h.depth > 1 && h.depth < 4);
---

<div class="toc">
  <button
    id="toc-toggle"
    class="w-full flex items-center justify-between text-sm font-medium text-gray-200 py-1"
    aria-expanded="true"
    aria-controls="toc-content"
  >
    <span>Contents</span>
    <svg
      class="w-4 h-4 text-gray-400 transition-transform duration-200"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>

  <div id="toc-content" class="mt-1">
    {filteredHeadings.length > 0 ? (
      <ol class="text-xs space-y-0.5">
        {filteredHeadings.map(heading => (
          <li 
            class="hover:bg-gray-800/50 rounded transition-colors"
            style={`padding-left: ${(heading.depth - 2) * 0.5}rem`}
          >
            <a
              href={`#${heading.slug}`}
              class="block py-1 px-2 text-gray-300 hover:text-blue-400 transition-colors"
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ol>
    ) : (
      <p class="text-xs text-gray-500 italic px-2 py-1">No sections available</p>
    )}
  </div>
</div>

<script define:vars={{ headings: filteredHeadings }}>
  function setupTOC() {
    const toggle = document.getElementById('toc-toggle');
    const content = document.getElementById('toc-content');
    const arrow = toggle?.querySelector('svg');
    
    if (!toggle || !content || !arrow) return;

    let isOpen = true;

    function updateState() {
      content.style.display = isOpen ? 'block' : 'none';
      arrow.style.transform = isOpen ? 'rotate(0deg)' : 'rotate(-90deg)';
      toggle.setAttribute('aria-expanded', isOpen.toString());
    }

    toggle.addEventListener('click', () => {
      isOpen = !isOpen;
      updateState();
    });

    // Handle clicks on TOC links
    content.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', () => {
        const id = link.getAttribute('href')?.slice(1);
        if (!id) return;
        
        const element = document.getElementById(id);
        if (!element) return;

        // Smooth scroll to element
        element.scrollIntoView({ behavior: 'smooth' });

        // Highlight the current section
        content.querySelectorAll('a').forEach(a => {
          a.classList.remove('text-blue-400');
          a.classList.add('text-gray-300');
        });
        link.classList.remove('text-gray-300');
        link.classList.add('text-blue-400');
      });
    });

    // Highlight current section on scroll
    let observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = entry.target.id;
          content.querySelectorAll('a').forEach(link => {
            if (link.getAttribute('href') === `#${id}`) {
              link.classList.remove('text-gray-300');
              link.classList.add('text-blue-400');
            } else {
              link.classList.remove('text-blue-400');
              link.classList.add('text-gray-300');
            }
          });
        }
      });
    }, { threshold: 0.5 });

    // Observe all section headings
    headings.forEach(heading => {
      const element = document.getElementById(heading.slug);
      if (element) observer.observe(element);
    });
  }

  document.addEventListener('DOMContentLoaded', setupTOC);
  document.addEventListener('astro:page-load', setupTOC);
</script>

<style>
  .toc {
    position: relative;
  }

  #toc-toggle {
    cursor: pointer;
    outline: none;
  }

  #toc-toggle:focus-visible {
    outline: 2px solid rgba(59, 130, 246, 0.5);
    border-radius: 0.375rem;
  }

  #toc-content {
    transition: all 0.2s ease-in-out;
  }

  /* Scrollbar styling */
  #toc-content {
    max-height: calc(100vh - 16rem);
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #4b5563 #1f2937;
  }

  #toc-content::-webkit-scrollbar {
    width: 4px;
  }

  #toc-content::-webkit-scrollbar-track {
    background: #1f2937;
  }

  #toc-content::-webkit-scrollbar-thumb {
    background-color: #4b5563;
    border-radius: 2px;
  }

  /* Active section indicator */
  #toc-content a.text-blue-400::before {
    content: '';
    position: absolute;
    left: 0;
    width: 2px;
    height: 1.25rem;
    background: #60a5fa;
    border-radius: 0 2px 2px 0;
    transform: translateY(-0.125rem);
  }
</style>